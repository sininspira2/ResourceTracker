import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

const MIGRATIONS_DIR = path.join(process.cwd(), 'drizzle');
const HASHES_FILE = path.join(process.cwd(), 'lib', 'migration-hashes.ts');

async function generateHashes() {
  console.log('--- Generating migration hashes ---');

  try {
    const files = await fs.readdir(MIGRATIONS_DIR);
    const sqlFiles = files.filter((file) => file.endsWith('.sql')).sort();

    const hashes: string[] = [];
    for (const file of sqlFiles) {
      const filePath = path.join(MIGRATIONS_DIR, file);
      const fileContent = await fs.readFile(filePath, 'utf-8');
      const hash = crypto.createHash('sha256').update(fileContent).digest('hex');
      hashes.push(hash);
    }

    const fileContent = `// This file is auto-generated by a build script. Do not edit manually.\n\nexport const MIGRATION_HASHES = ${JSON.stringify(
      hashes,
      null,
      2
    )};\n`;

    await fs.writeFile(HASHES_FILE, fileContent, 'utf-8');
    console.log(`✅ Successfully generated ${HASHES_FILE} with ${hashes.length} hashes.`);
  } catch (error) {
    console.error('❌ Failed to generate migration hashes:', error);
    process.exit(1);
  }
}

generateHashes();